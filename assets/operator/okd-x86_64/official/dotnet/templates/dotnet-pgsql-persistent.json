{
	"kind": "Template",
	"apiVersion": "v1",
	"metadata": {
		"name": "dotnet-pgsql-persistent",
		"creationTimestamp": null,
		"annotations": {
			"description": "An example .NET Core application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore.",
			"iconClass": "icon-dotnet",
			"openshift.io/display-name": ".NET Core + PostgreSQL (Persistent)",
			"tags": "quickstart,dotnet",
			"template.openshift.io/documentation-url": "https://github.com/redhat-developer/s2i-dotnetcore",
			"template.openshift.io/provider-display-name": "Red Hat, Inc.",
			"template.openshift.io/support-url": "https://access.redhat.com"
		}
	},
	"message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore.",
	"objects": [
		{
			"apiVersion": "v1",
			"kind": "Secret",
			"metadata": {
				"name": "${NAME}"
			},
			"stringData": {
				"connect-string": "Host=${DATABASE_SERVICE_NAME};Database=${DATABASE_NAME};Username=${DATABASE_USER};Password=${DATABASE_PASSWORD}",
				"database-password": "${DATABASE_PASSWORD}"
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "Exposes and load balances the application pods",
					"service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
				},
				"name": "${NAME}"
			},
			"spec": {
				"ports": [
					{
						"name": "web",
						"port": 8080,
						"targetPort": 8080
					}
				],
				"selector": {
					"name": "${NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Route",
			"metadata": {
				"name": "${NAME}"
			},
			"spec": {
				"host": "${APPLICATION_DOMAIN}",
				"to": {
					"kind": "Service",
					"name": "${NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "ImageStream",
			"metadata": {
				"annotations": {
					"description": "Keeps track of changes in the application image"
				},
				"name": "${NAME}"
			}
		},
		{
			"apiVersion": "v1",
			"kind": "BuildConfig",
			"metadata": {
				"annotations": {
					"description": "Defines how to build the application"
				},
				"name": "${NAME}"
			},
			"spec": {
				"output": {
					"to": {
						"kind": "ImageStreamTag",
						"name": "${NAME}:latest"
					}
				},
				"postCommit": {},
				"source": {
					"contextDir": "${CONTEXT_DIR}",
					"git": {
						"ref": "${SOURCE_REPOSITORY_REF}",
						"uri": "${SOURCE_REPOSITORY_URL}"
					},
					"type": "Git"
				},
				"strategy": {
					"sourceStrategy": {
						"env": [
							{
								"name": "DOTNET_STARTUP_PROJECT",
								"value": "${DOTNET_STARTUP_PROJECT}"
							},
							{
								"name": "DOTNET_ASSEMBLY_NAME",
								"value": "${DOTNET_ASSEMBLY_NAME}"
							},
							{
								"name": "DOTNET_NPM_TOOLS",
								"value": "${DOTNET_NPM_TOOLS}"
							},
							{
								"name": "DOTNET_TEST_PROJECTS",
								"value": "${DOTNET_TEST_PROJECTS}"
							},
							{
								"name": "DOTNET_CONFIGURATION",
								"value": "${DOTNET_CONFIGURATION}"
							},
							{
								"name": "DOTNET_RESTORE_SOURCES",
								"value": "${DOTNET_RESTORE_SOURCES}"
							},
							{
								"name": "DOTNET_TOOLS",
								"value": "${DOTNET_TOOLS}"
							}
						],
						"from": {
							"kind": "ImageStreamTag",
							"name": "${DOTNET_IMAGE_STREAM_TAG}",
							"namespace": "${NAMESPACE}"
						}
					},
					"type": "Source"
				},
				"triggers": [
					{
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					},
					{
						"github": {
							"secret": "${GITHUB_WEBHOOK_SECRET}"
						},
						"type": "GitHub"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"annotations": {
					"description": "Defines how to deploy the application server"
				},
				"name": "${NAME}"
			},
			"spec": {
				"replicas": 1,
				"selector": {
					"name": "${NAME}"
				},
				"strategy": {
					"resources": {},
					"rollingParams": {
						"intervalSeconds": 1,
						"maxSurge": "25%",
						"maxUnavailable": "25%",
						"timeoutSeconds": 600,
						"updatePeriodSeconds": 1
					},
					"type": "Rolling"
				},
				"template": {
					"metadata": {
						"labels": {
							"name": "${NAME}"
						},
						"name": "${NAME}"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "ConnectionString",
										"valueFrom": {
											"secretKeyRef": {
												"key": "connect-string",
												"name": "${NAME}"
											}
										}
									}
								],
								"image": " ",
								"livenessProbe": {
									"httpGet": {
										"path": "/",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 40,
									"timeoutSeconds": 10
								},
								"name": "dotnet-pgsql-persistent",
								"ports": [
									{
										"containerPort": 8080
									}
								],
								"readinessProbe": {
									"httpGet": {
										"path": "/",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 10,
									"timeoutSeconds": 30
								},
								"resources": {
									"limits": {
										"memory": "${MEMORY_LIMIT}"
									}
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"dotnet-pgsql-persistent"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "${NAME}:latest"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "PersistentVolumeClaim",
			"metadata": {
				"name": "${DATABASE_SERVICE_NAME}"
			},
			"spec": {
				"accessModes": [
					"ReadWriteOnce"
				],
				"resources": {
					"requests": {
						"storage": "${VOLUME_CAPACITY}"
					}
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "Exposes the database server"
				},
				"name": "${DATABASE_SERVICE_NAME}"
			},
			"spec": {
				"ports": [
					{
						"name": "postgresql",
						"port": 5432,
						"targetPort": 5432
					}
				],
				"selector": {
					"name": "${DATABASE_SERVICE_NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"annotations": {
					"description": "Defines how to deploy the database"
				},
				"name": "${DATABASE_SERVICE_NAME}"
			},
			"spec": {
				"replicas": 1,
				"selector": {
					"name": "${DATABASE_SERVICE_NAME}"
				},
				"strategy": {
					"type": "Recreate"
				},
				"template": {
					"metadata": {
						"labels": {
							"name": "${DATABASE_SERVICE_NAME}"
						},
						"name": "${DATABASE_SERVICE_NAME}"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "POSTGRESQL_USER",
										"value": "${DATABASE_USER}"
									},
									{
										"name": "POSTGRESQL_PASSWORD",
										"valueFrom": {
											"secretKeyRef": {
												"key": "database-password",
												"name": "${NAME}"
											}
										}
									},
									{
										"name": "POSTGRESQL_DATABASE",
										"value": "${DATABASE_NAME}"
									},
									{
										"name": "POSTGRESQL_MAX_CONNECTIONS",
										"value": "${POSTGRESQL_MAX_CONNECTIONS}"
									},
									{
										"name": "POSTGRESQL_SHARED_BUFFERS",
										"value": "${POSTGRESQL_SHARED_BUFFERS}"
									}
								],
								"image": " ",
								"livenessProbe": {
									"initialDelaySeconds": 30,
									"tcpSocket": {
										"port": 5432
									},
									"timeoutSeconds": 1
								},
								"name": "postgresql",
								"ports": [
									{
										"containerPort": 5432
									}
								],
								"resources": {
									"limits": {
										"memory": "${MEMORY_POSTGRESQL_LIMIT}"
									}
								},
								"volumeMounts": [
									{
										"mountPath": "/var/lib/pgsql/data",
										"name": "${DATABASE_SERVICE_NAME}-data"
									}
								]
							}
						],
						"volumes": [
							{
								"name": "${DATABASE_SERVICE_NAME}-data",
								"persistentVolumeClaim": {
									"claimName": "${DATABASE_SERVICE_NAME}"
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"postgresql"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "postgresql:9.5",
								"namespace": "openshift"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		}
	],
	"parameters": [
		{
			"name": "NAME",
			"displayName": "Name",
			"description": "The name assigned to all of the frontend objects defined in this template.",
			"value": "musicstore",
			"required": true
		},
		{
			"name": "MEMORY_LIMIT",
			"displayName": "Memory Limit",
			"description": "Maximum amount of memory the .NET Core container can use.",
			"value": "128Mi",
			"required": true
		},
		{
			"name": "MEMORY_POSTGRESQL_LIMIT",
			"displayName": "Memory Limit (PostgreSQL)",
			"description": "Maximum amount of memory the PostgreSQL container can use.",
			"value": "128Mi",
			"required": true
		},
		{
			"name": "VOLUME_CAPACITY",
			"displayName": "Volume Capacity",
			"description": "Volume space available for data, e.g. 512Mi, 2Gi",
			"value": "256Mi",
			"required": true
		},
		{
			"name": "DOTNET_IMAGE_STREAM_TAG",
			"displayName": ".NET builder",
			"description": "The image stream tag which is used to build the code.",
			"value": "dotnet:2.1",
			"required": true
		},
		{
			"name": "NAMESPACE",
			"displayName": "Namespace",
			"description": "The OpenShift Namespace where the .NET builder ImageStream resides.",
			"value": "openshift",
			"required": true
		},
		{
			"name": "SOURCE_REPOSITORY_URL",
			"displayName": "Git Repository URL",
			"description": "The URL of the repository with your application source code.",
			"value": "https://github.com/redhat-developer/s2i-aspnet-musicstore-ex.git",
			"required": true
		},
		{
			"name": "SOURCE_REPOSITORY_REF",
			"displayName": "Git Reference",
			"description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
			"value": "rel/2.1-example"
		},
		{
			"name": "CONTEXT_DIR",
			"displayName": "Context Directory",
			"description": "Set this to the relative path to your project if it is not in the root of your repository."
		},
		{
			"name": "DOTNET_STARTUP_PROJECT",
			"displayName": "Startup Project",
			"description": "Set this to a project file (e.g. csproj) or a folder containing a single project file.",
			"value": "samples/MusicStore"
		},
		{
			"name": "DOTNET_ASSEMBLY_NAME",
			"displayName": "Startup Assembly",
			"description": "Set this when the assembly name is overridden in the project file."
		},
		{
			"name": "DOTNET_TOOLS",
			"displayName": ".NET Tools",
			"description": "Set this to a space separated list of .NET tools needed to publish."
		},
		{
			"name": "DOTNET_NPM_TOOLS",
			"displayName": "Npm Tools",
			"description": "Set this to a space separated list of npm tools needed to publish."
		},
		{
			"name": "DOTNET_TEST_PROJECTS",
			"displayName": "Test projects",
			"description": "Set this to a space separated list of test projects to run before publishing."
		},
		{
			"name": "DOTNET_CONFIGURATION",
			"displayName": "Configuration",
			"description": "Set this to configuration (Release/Debug).",
			"value": "Release"
		},
		{
			"name": "DOTNET_RESTORE_SOURCES",
			"displayName": "NuGet package sources",
			"description": "Set this to override the NuGet.config sources."
		},
		{
			"name": "APPLICATION_DOMAIN",
			"displayName": "Application Hostname",
			"description": "The exposed hostname that will route to the .NET Core service, if left blank a value will be defaulted."
		},
		{
			"name": "GITHUB_WEBHOOK_SECRET",
			"displayName": "GitHub Webhook Secret",
			"description": "A secret string used to configure the GitHub webhook.",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{40}"
		},
		{
			"name": "DATABASE_SERVICE_NAME",
			"displayName": "Database Service Name",
			"value": "postgresql",
			"required": true
		},
		{
			"name": "DATABASE_USER",
			"displayName": "Database Username",
			"generate": "expression",
			"from": "user[A-Z0-9]{3}"
		},
		{
			"name": "DATABASE_PASSWORD",
			"displayName": "Database Password",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}"
		},
		{
			"name": "DATABASE_NAME",
			"displayName": "Database Name",
			"value": "musicstore",
			"required": true
		},
		{
			"name": "POSTGRESQL_MAX_CONNECTIONS",
			"displayName": "Maximum Database Connections",
			"value": "100"
		},
		{
			"name": "POSTGRESQL_SHARED_BUFFERS",
			"displayName": "Shared Buffer Amount",
			"value": "12MB"
		}
	],
	"labels": {
		"template": "dotnet-pgsql-persistent"
	}
}